// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_int
IntegerVector sample_int(int B, int E, int S);
RcppExport SEXP _rcov_sample_int(SEXP BSEXP, SEXP ESEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(B, E, S));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_block_cv
arma::vec rcpp_block_cv(const arma::vec& x, int S, int h, const arma::vec& tau_vec, unsigned int M_est);
RcppExport SEXP _rcov_rcpp_block_cv(SEXP xSEXP, SEXP SSEXP, SEXP hSEXP, SEXP tau_vecSEXP, SEXP M_estSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_vec(tau_vecSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M_est(M_estSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_block_cv(x, S, h, tau_vec, M_est));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_huber_mean
double rcpp_huber_mean(const arma::vec& x, double tau);
RcppExport SEXP _rcov_rcpp_huber_mean(SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_huber_mean(x, tau));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spec_block_cv
arma::vec rcpp_spec_block_cv(const arma::mat& X, int S, int h, int lag, const arma::vec& tau_vec);
RcppExport SEXP _rcov_rcpp_spec_block_cv(SEXP XSEXP, SEXP SSEXP, SEXP hSEXP, SEXP lagSEXP, SEXP tau_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_vec(tau_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spec_block_cv(X, S, h, lag, tau_vec));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spec_trunc_autocov
arma::mat rcpp_spec_trunc_autocov(const arma::mat& X, int l, double tau);
RcppExport SEXP _rcov_rcpp_spec_trunc_autocov(SEXP XSEXP, SEXP lSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spec_trunc_autocov(X, l, tau));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_trunc_mean
double rcpp_trunc_mean(const arma::vec& x, double tau);
RcppExport SEXP _rcov_rcpp_trunc_mean(SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_trunc_mean(x, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcov_sample_int", (DL_FUNC) &_rcov_sample_int, 3},
    {"_rcov_rcpp_block_cv", (DL_FUNC) &_rcov_rcpp_block_cv, 5},
    {"_rcov_rcpp_huber_mean", (DL_FUNC) &_rcov_rcpp_huber_mean, 2},
    {"_rcov_rcpp_spec_block_cv", (DL_FUNC) &_rcov_rcpp_spec_block_cv, 5},
    {"_rcov_rcpp_spec_trunc_autocov", (DL_FUNC) &_rcov_rcpp_spec_trunc_autocov, 3},
    {"_rcov_rcpp_trunc_mean", (DL_FUNC) &_rcov_rcpp_trunc_mean, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
